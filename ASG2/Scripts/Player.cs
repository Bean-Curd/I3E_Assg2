/*
 * Author: Ashley Goh Yu Ting
 * Date: 05/06/2023
 * Description: I3E/STLD Assignment 2 - Player
 */

using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.InputSystem; //For movement
using UnityEngine.SceneManagement;


public class Player : MonoBehaviour
{
    /// <summary>
    /// New vector with (0,0,0), for WASD movement
    /// </summary>
    Vector3 moveData = Vector3.zero;

    /// <summary>
    /// Movement speed
    /// </summary>
    public float moveSpeed = 4.0f;

    /// <summary>
    /// New vextor for mouse/camera movement
    /// </summary>
    Vector3 rotationInput = Vector3.zero;

    /// <summary>
    /// Rotation speed
    /// </summary>
    public float rotationSpeed = 0.25f;

    /// <summary>
    /// Is player trying to jump
    /// </summary>
    bool jump;

    /// <summary>
    /// Check if player is on the floor -> Prevents double jumping
    /// </summary>
    bool onFloor;

    /// <summary>
    /// Choose the camera for the head so it can rotate the camera instead of the whole body
    /// </summary>
    public Transform head;

    /// <summary>
    /// Raycast ray distance
    /// </summary>
    public float InteractionDistance = 3f;

    /// <summary>
    /// To set as main camera
    /// </summary>
    Camera cam;

    /// <summary>
    /// E from exit
    /// </summary>
    public bool eKey = false;
    /// <summary>
    /// X from exit
    /// </summary>
    public bool xKey = false;
    /// <summary>
    /// I from exit
    /// </summary>
    public bool iKey = false;
    /// <summary>
    /// T from exit
    /// </summary>
    public bool tKey = false;

    /// <summary>
    /// For the first-aid kit collection
    /// </summary>
    private Coroutine firstAidText;
    /// <summary>
    /// For the captainCard collection
    /// </summary>
    private Coroutine captainCardText;
    /// <summary>
    /// For the main monitor interaction
    /// </summary>
    private Coroutine mainMonitorText;
    /// <summary>
    /// For the weaponCard collection
    /// </summary>
    private Coroutine weaponCardText;
    /// <summary>
    /// For the c4 collection
    /// </summary>
    private Coroutine c4Text;
    /// <summary>
    /// For the escape pod interaction
    /// </summary>
    private Coroutine escapePodText;
    /// <summary>
    /// For the exit/main hatch interaction
    /// </summary>
    private Coroutine exitText;
    /// <summary>
    /// For the rock interaction
    /// </summary>
    private Coroutine rockText;

    /// <summary>
    /// So it can be accessed by other scripts
    /// </summary>
    public static Player instance;

    private void Awake()
    {
        instance = this;
        DontDestroyOnLoad(gameObject);
    }


    // Start is called before the first frame update
    void Start()
    {
        eKey = false;
        xKey = false;
        iKey = false;
        tKey = false;

        if (GameManager.gameManager.firstAidKit) //If have the first aid kit, show the symbol
        {
            PlayerUI.instance.firstAidKit.SetActive(true);
            PlayerUI.instance.firstAidKitOverlay.SetActive(true);
        }
        if (GameManager.gameManager.captainCard) //If have the captain's card, show the symbol
        {
            PlayerUI.instance.captainCard.SetActive(true);
        }
        if (GameManager.gameManager.suitObtained) //If have the suit, show the UI
        {
            PlayerUI.instance.suitUI.SetActive(true);
        }
        if (GameManager.gameManager.weaponCard) //If have the weapons card, show the symbol
        {
            PlayerUI.instance.weaponCard.SetActive(true);
        }
        if (GameManager.gameManager.c4) //If have the c4, show the symbol
        {
            PlayerUI.instance.c4.SetActive(true);
        }
        if (GameManager.gameManager.secondCutscene) //If have seen cutscene 2, fade out c4
        {
            PlayerUI.instance.c4Overlay.SetActive(true);
        }
    }


    /// <summary>
    /// Triggers when WASD pressed -> Retrieving the input
    /// </summary>
    /// <param name="value"></param>
    void OnMove(InputValue value)
    {
        moveData = value.Get<Vector2>(); //WASD value (W=1,S=-1,A=-1,D=1) -> Generated by Unity
        Audio.instance.walk.Play();
    }

    /// <summary>
    /// For mouse/camera movement
    /// </summary>
    /// <param name="value"></param>
    void OnLook(InputValue value)
    {
        rotationInput.y = value.Get<Vector2>().x; //For left right movement
        rotationInput.x = -value.Get<Vector2>().y; //For up down movement
    }

    /// <summary>
    /// So player can jump
    /// </summary>
    void OnSpaceKey()
    {
        if (onFloor) //If player is on the floor, can jump 
        {
            jump = true;
            Audio.instance.jump.Play();
        }
    }


    /// <summary>
    /// To pause the game
    /// </summary>
    void OnPause() //When the escape key is pressed, stop time and bring up pause screen
    {
        if (GameManager.gameManager.dead) //If currently dead, respawn
        {
            Debug.Log("Respawning");

            GameManager.gameManager.dead = false;
            GameManager.gameManager.respawn = true;
        }
        else if (GameManager.gameManager.pause) //If currently paused, unpause
        {
            Audio.instance.button.Play();
            GameManager.gameManager.pause = false;
        }
        else if (GameManager.gameManager.pause != true) //If not paused, pause 
        {
            Audio.instance.button.Play();
            GameManager.gameManager.pause = true;
        }
    }

    /// <summary>
    /// E from exit to leave for start menu
    /// </summary>
    void OnEKey()
    {
        if (GameManager.gameManager.pause || GameManager.gameManager.dead)
        {
            eKey = true;
        }
    }

    /// <summary>
    /// X from exit to leave for start menu
    /// </summary>
    void OnXKey()
    {
        if (GameManager.gameManager.pause || GameManager.gameManager.dead)
        {
            xKey = true;
        }
    }

    /// <summary>
    /// I from exit to leave for start menu
    /// </summary>
    void OnIKey()
    {
        if (GameManager.gameManager.pause || GameManager.gameManager.dead)
        {
            iKey = true;
        }
    }

    /// <summary>
    /// T from exit to leave for start menu
    /// </summary>
    void OnTKey()
    {
        if (GameManager.gameManager.pause || GameManager.gameManager.dead)
        {
            tKey = true;
        }
    }

    /// <summary>
    /// What happens when you enter an object
    /// </summary>
    /// <param name="collision"></param>
    private void OnCollisionEnter(Collision collision)
    {
        //Debug.Log(gameObject.name + " Enter " + collision.gameObject.name);
    }

    /// <summary>
    /// Trigger when entering an object
    /// </summary>
    /// <param name="collision"></param>
    private void OnTriggerEnter(Collider collision)
    {
        if (collision.gameObject.tag == "ScottTrigger") //If approaching scott's body
        {
            Debug.Log("Approaching Scott");
            PlayerUI.instance.scottInteract = true;
            PlayerUI.instance.scott1.SetActive(true);
            Destroy(collision.gameObject);
        }
        else if (collision.gameObject.tag == "EmergencyDoor") //If approaching door's locked down during emergency 
        {
            Debug.Log("Approaching Emergency Door");
            PlayerUI.instance.emergencyDoorInteract = true;
            PlayerUI.instance.emergency1.SetActive(true);
        }
        else if (collision.gameObject.tag == "WeaponsDoor") //If approaching door's locked down during emergency 
        {
            Debug.Log("Approaching Weapon Door");
            if (GameManager.gameManager.weaponCard) //If have weapons card, allow access
            {
                PlayerUI.instance.weaponDoorInteract = true;
                PlayerUI.instance.weaponDoor2.SetActive(true);
                Audio.instance.door.Play();
                GameManager.gameManager.DestroyWeaponDoors();
            }
            else
            {
                PlayerUI.instance.weaponDoorInteract = true;
                PlayerUI.instance.weaponDoor1.SetActive(true);
            }
        }
        else if (collision.gameObject.tag == "ElenaTrigger") //If approaching elena's body
        {
            Debug.Log("Approaching Elena");
            PlayerUI.instance.elenaInteract = true;
            PlayerUI.instance.elena1.SetActive(true);
            Destroy(collision.gameObject);
        }
        else if (collision.gameObject.tag == "HealingStation") //If near healing station, restore HP
        {
            PlayerUI.instance.healingInteract = true;

            if (ASG2_HealthBar.instance.currentHealth >= 10000) //If max HP
            {
                Debug.Log("Healing recieved: Max HP");
                PlayerUI.instance.healingNo.SetActive(true);
            }
            else
            {
                Debug.Log("Healing recieved: Low HP");
                if (GameManager.gameManager.healLimit) //If there is a heal limit, deduct 1
                {
                    if (GameManager.gameManager.healCount > 0)
                    {
                        Audio.instance.heal.Play();
                        ASG2_HealthBar.instance.Damage(-10000); //Restore HP
                        GameManager.gameManager.healCount -= 1;
                        PlayerUI.instance.healingYes.SetActive(true);
                        Debug.Log("Heals left = " + GameManager.gameManager.healCount);
                    }
                }
                else
                {
                    Audio.instance.heal.Play();
                    ASG2_HealthBar.instance.Damage(-10000); //Restore HP
                    PlayerUI.instance.healingYes.SetActive(true);
                }
            }
        }
        else if (collision.gameObject.tag == "JakeTrigger") //If approaching jake's body
        {
            Debug.Log("Approaching Jake");
            PlayerUI.instance.jakeInteract = true;
            PlayerUI.instance.jake1.SetActive(true);
            Destroy(collision.gameObject);
        }
        else if (collision.gameObject.tag == "SuitSectionBlocks") //If approaching a suit section block 
        {
            Debug.Log("Approaching Suit Section Block");
            PlayerUI.instance.suitSectionBlockInteract = true;
            PlayerUI.instance.suitSectionBlock.SetActive(true);
        }
        else if (collision.gameObject.tag == "SuitTrigger") //If approaching the suit
        {
            if (GameManager.gameManager.suitSectionStart && GameManager.gameManager.powerPuzzleDone != true) //If in suit section and not done with puzzle
            {
                Debug.Log("Approaching Suit");
                PlayerUI.instance.suitInteract = true;
                PlayerUI.instance.suit1.SetActive(true);
            }
            else if (GameManager.gameManager.suitSectionStart && GameManager.gameManager.powerPuzzleDone) // If in suit section and done with puzzle
            {
                Debug.Log("Collecting Suit");
                Audio.instance.wind.Stop();
                Audio.instance.indoorAmbience.Play();
                Audio.instance.itemInteract.Play();
                GameManager.gameManager.suitSectionStart = false;
                GameManager.gameManager.suitObtained = true;
                GameManager.gameManager.DestroySuitItems();

                SuitSectionTimer.instance.suitSectionTimerText.SetActive(false);
                SuitSectionBlock.instance.DestroyBlock();
                BeforeWeaponsBlock.instance.TriggerBlock();

                PlayerUI.instance.suitUI.SetActive(true);
                PlayerUI.instance.suitInteract = true;
                PlayerUI.instance.suitCollect1.SetActive(true);
            }
        }
        else if (collision.gameObject.tag == "BeforeWeaponsBlocks") //If approaching a before weapons block 
        {
            Debug.Log("Approaching Before Weapons Block");
            PlayerUI.instance.beforeWeaponsBlockInteract = true;
            PlayerUI.instance.beforeWeaponsBlock.SetActive(true);
        }
        else if (collision.gameObject.tag == "JoseTrigger") //If approaching jose's body
        {
            Debug.Log("Approaching Jose");
            PlayerUI.instance.joseInteract = true;
            PlayerUI.instance.jose1.SetActive(true);
            Destroy(collision.gameObject);
        }
    }

    /// <summary>
    /// What happens when player is on an object
    /// </summary>
    void OnCollisionStay()
    {
        onFloor = true; //Confirm the player is on the floor 
    }

    /// <summary>
    /// What happens when you exit an object
    /// </summary>
    /// <param name="collision"></param>
    private void OnCollisionExit(Collision collision)
    {
        //Debug.Log(gameObject.name + " Exit " + collision.gameObject.name);

        onFloor = false; //Once player is off an object they are no longer touching floor
    }

    /// <summary>
    /// Trigger when exiting an object
    /// </summary>
    /// <param name="collision"></param>
    private void OnTriggerExit(Collider collision)
    {
        if (collision.gameObject.tag == "MonitorTrigger" && GameManager.gameManager.inPowerPuzzle) //If leaving main monitor in power puzzle, hide screen
        {
            Debug.Log("Too far from monitor");
            PlayerUI.instance.powerPuzzlePage.SetActive(false);
            GameManager.gameManager.inPowerPuzzle = false;
        }
    }

    /// <summary>
    /// Delay first-aid kit dialogue for 0.05 second
    /// </summary>
    IEnumerator WaitForFirstAid()
    {
        yield return new WaitForSeconds(0.05f);
        Debug.Log("Delay 0.05 second");

        PlayerUI.instance.firstAidInteract = true; //Set up dialogue
        PlayerUI.instance.firstAid1.SetActive(true);

        firstAidText = null;
    }

    /// <summary>
    /// Delay captain's card dialogue for 0.05 second
    /// </summary>
    IEnumerator WaitForCaptainCard()
    {
        yield return new WaitForSeconds(0.05f);
        Debug.Log("Delay 0.05 second");

        PlayerUI.instance.captainInteract = true; //Set up dialogue
        PlayerUI.instance.captain1.SetActive(true);

        captainCardText = null;
    }

    /// <summary>
    /// Delay monitor interaction dialogue for 0.05 second
    /// </summary>
    IEnumerator WaitForMainMonitor()
    {
        yield return new WaitForSeconds(0.05f);
        Debug.Log("Delay 0.05 second");

        PlayerUI.instance.monitorInteract = true;

        if (GameManager.gameManager.suitSectionStart && GameManager.gameManager.inPowerPuzzle != true) //If suit section started and not in puzzle, tell to divert power
        {
            PlayerUI.instance.powerPuzzle1.SetActive(true);
        }
        else if (GameManager.gameManager.captainCard && GameManager.gameManager.suitSectionStart != true) //If have the captain's card and not in suit section, start cutscene 1
        {
            PlayerUI.instance.monitorYes.SetActive(true);
        }
        else if (GameManager.gameManager.captainCard != true) //If don't have the captain's card, deny access
        {
            PlayerUI.instance.monitorNo.SetActive(true);
        }

        mainMonitorText = null;
    }

    /// <summary>
    /// Delay weapons' card dialogue for 0.05 second
    /// </summary>
    IEnumerator WaitForWeaponCard()
    {
        yield return new WaitForSeconds(0.05f);
        Debug.Log("Delay 0.05 second");

        PlayerUI.instance.weaponInteract = true; //Set up dialogue
        PlayerUI.instance.weapon1.SetActive(true);

        weaponCardText = null;
    }

    /// <summary>
    /// Delay c4 dialogue for 0.05 second
    /// </summary>
    IEnumerator WaitForC4()
    {
        yield return new WaitForSeconds(0.05f);
        Debug.Log("Delay 0.05 second");

        PlayerUI.instance.c4Interact = true; //Set up dialogue
        PlayerUI.instance.c41.SetActive(true);

        c4Text = null;
    }

    /// <summary>
    /// Delay escape pod dialogue for 0.05 second
    /// </summary>
    IEnumerator WaitForEscapePod()
    {
        yield return new WaitForSeconds(0.05f);
        Debug.Log("Delay 0.05 second");

        PlayerUI.instance.escapePodInteract = true;

        if (GameManager.gameManager.secondCutscene) //If c4 used, allow exit
        {
            PlayerUI.instance.escapePodYes.SetActive(true);
        }
        else if (GameManager.gameManager.secondCutscene != true) //If c4 not used, deny access
        {
            PlayerUI.instance.escapePodNo.SetActive(true);
        }

        escapePodText = null;
    }

    /// <summary>
    /// Delay exit/main hatch dialogue for 0.05 second
    /// </summary>
    IEnumerator WaitForExit()
    {
        yield return new WaitForSeconds(0.05f);
        Debug.Log("Delay 0.05 second");

        PlayerUI.instance.exitInteract = true;

        if (GameManager.gameManager.c4) //If c4 obtained, allow exit
        {
            PlayerUI.instance.exitYes.SetActive(true);
        }
        else if (GameManager.gameManager.c4 != true) //If c4 not obtained, deny exit
        {
            PlayerUI.instance.exitNo.SetActive(true);
        }

        exitText = null;
    }

    /// <summary>
    /// Delay rock dialogue for 0.05 second
    /// </summary>
    IEnumerator WaitForRocks()
    {
        yield return new WaitForSeconds(0.05f);
        Debug.Log("Delay 0.05 second");

        PlayerUI.instance.rockInteract = true;
        PlayerUI.instance.rockYes.SetActive(true);

        rockText = null;
    }

    // Update is called once per frame
    void Update()
    {
        cam = GameObject.FindGameObjectWithTag("MainCamera").GetComponent<Camera>();

        if (SceneManager.GetActiveScene().buildIndex != 2 && SceneManager.GetActiveScene().buildIndex != 4 && SceneManager.GetActiveScene().buildIndex != 5)
        {
            if (SceneManager.GetActiveScene().buildIndex == 3) //Increase speed in outdoor area
            {
                moveSpeed = 25f; //Increase movement speed if player can sprint
            }
            else
            {
                moveSpeed = 4f; //Increase movement speed if player can sprint
            }
        }

        if (jump && onFloor) //If player is trying to jump and is on the floor
        {
            GetComponent<Rigidbody>().AddForce(new Vector3(0, 5, 0), ForceMode.Impulse);
            onFloor = false; //Prevents player from jumping immediately after
            jump = false; //Resets jump
        }

        if (Input.GetKey(KeyCode.LeftShift)) //If left shift is pressed, decrease energy bar
        {
            ASG2_EnergyBar.instance.Sprint(20);
        }

        if (Input.GetKeyUp(KeyCode.LeftShift)) //If left shift is lifted, reset movement speed
        {
            if (SceneManager.GetActiveScene().buildIndex == 3) //Increase speed in outdoor area
            {
                moveSpeed = 25f; //Increase movement speed if player can sprint
            }
            else
            {
                moveSpeed = 4f; //Increase movement speed if player can sprint
            }
        }

        if (Input.GetKeyUp(KeyCode.W) || Input.GetKeyUp(KeyCode.A) || Input.GetKeyUp(KeyCode.S) || Input.GetKeyUp(KeyCode.D) || onFloor != true)
        {
            Audio.instance.walk.Stop();
        }

        if (GameManager.gameManager.pause || GameManager.gameManager.dead) //If currently paused or dead, allow for exit
        {
            if (eKey) //If E key is pressed
            {
                Debug.Log("E");
                if (xKey) //if X key is pressed
                {
                    Debug.Log("X");
                    if (iKey) //If I key is pressed
                    {
                        Debug.Log("I");
                        if (tKey) //If T key is pressed
                        {
                            Debug.Log("T");
                            GameManager.gameManager.LoadingScreen();
                            SceneManager.LoadScene(0);
                        }
                    }
                }
            }
        }

        if (Input.GetMouseButtonDown(0)) //If left clicking an interactible object -> perform an action
        {
            /// <summary>
            /// Ray sent on left click
            /// </summary>
            Ray ray = cam.ScreenPointToRay(Input.mousePosition);

            if (Physics.Raycast(ray, out RaycastHit hitInfo, InteractionDistance))
            {
                if (hitInfo.collider.gameObject.GetComponent<Interactible>() != null) //If object is interactible/has the interactible script
                {
                    Debug.Log(hitInfo.collider.gameObject.tag);

                    if (hitInfo.collider.gameObject.tag == "First-Aid Kit")
                    {
                        Debug.Log("Destroying object");
                        Audio.instance.itemCollect.Play();
                        GameManager.gameManager.firstAidKit = true;
                        ASG2_HealthBar.instance.Damage(-6000); //Restore HP to max
                        Audio.instance.heal.Play();

                        PlayerUI.instance.firstAidKit.SetActive(true); //Show symbols
                        PlayerUI.instance.firstAidKitOverlay.SetActive(true);

                        PlayerUI.instance.interactibleText.SetActive(false); //Hide interactible text

                        Destroy(hitInfo.collider.gameObject);

                        firstAidText = StartCoroutine(WaitForFirstAid());
                    }
                    else if (hitInfo.collider.gameObject.tag == "Captain's Card" && PlayerUI.instance.monitorNo.activeSelf != true) //Check if monitor text is not active, if not will trigger cutscene once captains card is collected
                    {
                        Debug.Log("Destroying object");
                        Audio.instance.itemCollect.Play();
                        GameManager.gameManager.captainCard = true;

                        PlayerUI.instance.captainCard.SetActive(true); //Show symbol

                        PlayerUI.instance.interactibleText.SetActive(false); //Hide interactible text

                        Destroy(hitInfo.collider.gameObject);

                        captainCardText = StartCoroutine(WaitForCaptainCard());
                    }
                    else if (hitInfo.collider.gameObject.tag == "Monitor")
                    {
                        Debug.Log("Interacting with Monitor");
                        Audio.instance.itemInteract.Play();

                        PlayerUI.instance.interactibleText.SetActive(false); //Hide interactible text

                        mainMonitorText = StartCoroutine(WaitForMainMonitor());
                    }
                    else if (hitInfo.collider.gameObject.tag == "Weapons' Card")
                    {
                        Debug.Log("Destroying object");
                        Audio.instance.itemCollect.Play();
                        GameManager.gameManager.weaponCard = true;

                        PlayerUI.instance.weaponCard.SetActive(true); //Show symbol

                        PlayerUI.instance.interactibleText.SetActive(false); //Hide interactible text

                        Destroy(hitInfo.collider.gameObject);
                        BeforeWeaponsBlock.instance.DestroyBlock();

                        weaponCardText = StartCoroutine(WaitForWeaponCard());
                    }
                    else if (hitInfo.collider.gameObject.tag == "C4" && PlayerUI.instance.exitNo.activeSelf != true) //Check if exit text is not active, if not will trigger cutscene once c4 is collected
                    {
                        Debug.Log("Destroying object");
                        Audio.instance.itemCollect.Play();
                        GameManager.gameManager.c4 = true;

                        PlayerUI.instance.c4.SetActive(true); //Show symbol

                        PlayerUI.instance.interactibleText.SetActive(false); //Hide interactible text

                        Destroy(hitInfo.collider.gameObject);

                        c4Text = StartCoroutine(WaitForC4());
                    }
                    else if (hitInfo.collider.gameObject.tag == "Escape Pod")
                    {
                        Debug.Log("Interacting with Escape Pod");
                        Audio.instance.itemInteract.Play();

                        PlayerUI.instance.interactibleText.SetActive(false); //Hide interactible text

                        escapePodText = StartCoroutine(WaitForEscapePod());
                    }
                    else if (hitInfo.collider.gameObject.tag == "Exit")
                    {
                        Debug.Log("Interacting with Main Hatch");
                        Audio.instance.itemInteract.Play();

                        PlayerUI.instance.interactibleText.SetActive(false); //Hide interactible text

                        exitText = StartCoroutine(WaitForExit());
                    }
                    else if (hitInfo.collider.gameObject.tag == "Rocks")
                    {
                        Debug.Log("Interacting with Rocks");
                        Audio.instance.itemPlaced.Play();

                        PlayerUI.instance.interactibleText.SetActive(false); //Hide interactible text

                        rockText = StartCoroutine(WaitForRocks());
                    }
                    else if (hitInfo.collider.gameObject.tag == "ReturnDoor")
                    {
                        Debug.Log("Returning to Spaceship");
                        Audio.instance.itemInteract.Play();

                        PlayerUI.instance.interactibleText.SetActive(false); //Hide interactible text
                        GameManager.gameManager.LoadingScreen();

                        SceneManager.LoadScene(SceneManager.GetActiveScene().buildIndex - 2); //Moves to the spaceship scene

                    }
                }
            }
        }

        /// <summary>
        /// Turning the input into movement -> forward/back movement
        /// </summary>
        Vector3 forwardMove = transform.forward; //Vector3(0,0,1)

        /// <summary>
        /// Turning the input into movement -> left/right movement
        /// </summary>
        Vector3 rightMove = transform.right; //Vector3(1,0,0)

        /// <summary>
        /// For the player to move
        /// </summary>
        GetComponent<Rigidbody>().MovePosition(transform.position + (forwardMove * moveData.y
        + rightMove * moveData.x) * moveSpeed * Time.deltaTime);

        /// <summary>
        /// For the player to rotate
        /// </summary>
        transform.rotation = Quaternion.Euler(transform.rotation.eulerAngles + new Vector3(0, rotationInput.y) * rotationSpeed);

        /// <summary>
        /// Setting limits so the camera can rotate like how a head would
        /// </summary>
        var rot = head.rotation.eulerAngles + new Vector3(rotationInput.x, 0) * rotationSpeed; //For camera to rotate 

        // Setting limits so the camera can rotate like how a head would
        while (rot.x > 180f)
        {
            rot.x -= 360f;
        }

        while (rot.x < -180f)
        {
            rot.x += 360f;
        }

        if (rot.x > 60f)
        {
            rot.x = 60f;
        }

        if (rot.x < -60f)
        {
            rot.x = -60f;
        }

        /// <summary>
        /// Applying the limits to the head rotation
        /// </summary>
        head.rotation = Quaternion.Euler(rot);
    }
}
